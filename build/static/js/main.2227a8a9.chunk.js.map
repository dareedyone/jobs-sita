{"version":3,"sources":["components/Note.js","components/Notification.js","App.js","services/notes.js","serviceWorker.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","axios","get","then","response","data","initialNotes","console","log","length","notesToShow","filter","toggleImportanceOf","id","find","n","changedNote","newObject","put","update","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","post","concat","value","onChange","target","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2227a8a9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\nexport default Note;\r\n","import React from \"react\";\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport { getAll, create, update } from \"./services/notes\";\nimport Notification from \"./components/Notification\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2020\n      </em>\n    </div>\n  );\n};\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  console.log(\"render\", notes.length, \"notes\");\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    };\n\n    create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\nexport const getAll = () => {\r\n  return axios.get(baseUrl).then((response) => response.data);\r\n};\r\n\r\nexport const create = (newObject) => {\r\n  return axios.post(baseUrl, newObject).then((response) => response.data);\r\n};\r\n\r\nexport const update = (id, newObject) => {\r\n  return axios\r\n    .put(`${baseUrl}/${id}`, newObject)\r\n    .then((response) => response.data);\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// const notes = [\n//   {\n//     id: 1,\n//     content: \"HTML is easy\",\n//     date: \"2019-05-30T17:30:31.098Z\",\n//     important: true,\n//   },\n//   {\n//     id: 2,\n//     content: \"Browser can execute only Javascript\",\n//     date: \"2019-05-30T18:39:34.091Z\",\n//     important: false,\n//   },\n//   {\n//     id: 3,\n//     content: \"GET and POST are the most important methods of HTTP protocol\",\n//     date: \"2019-05-30T19:20:14.298Z\",\n//     important: true,\n//   },\n// ];\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}